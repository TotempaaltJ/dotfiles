""" vimrc
" Run any command styled [cmd] by pressing Control+E.
" [so $MYVIMRC | nohlsearch] [Gstatus] [Gdiff]
nnoremap <C-e> "cyi[<CR>:@c<CR>

set nocompatible               " be iMproved
filetype off                   " required!

"" Plug plugins
" [PlugInstall] [PlugClean]
call plug#begin('~/.vim/plugged')
" Plugin plugins
Plug 'tpope/vim-repeat'

" Layout
Plug 'vim-scripts/Zenburn'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Files
if executable("fzf")
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
else
    Plug 'ctrlpvim/ctrlp.vim'
    Plug 'FelikZ/ctrlp-py-matcher'
endif
Plug 'rking/ag.vim'
Plug 'tpope/vim-vinegar'
Plug 'mxw/vim-jsx'

" SVC
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

" Editing
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'neomake/neomake'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'sbdchd/neoformat'

" Language-specific
Plug 'zchee/deoplete-jedi'
Plug 'leafgarland/typescript-vim'
Plug 'Quramy/tsuquyomi'
Plug 'digitaltoad/vim-pug'
Plug 'rust-lang/rust.vim'
Plug 'elixir-lang/vim-elixir'
Plug 'pangloss/vim-javascript'

" Writing
Plug 'junegunn/limelight.vim'
Plug 'junegunn/goyo.vim'

Plug 'Shougo/vimproc.vim', { 'do': 'make' }

call plug#end()


"" Some basic configuration
filetype plugin indent on
set encoding=utf-8
syntax on
set t_Co=256
colorscheme zenburn

"" Functional settings
set hidden         " Hide buffers, don't close them.
set number         " Line numbers plz.
set showmatch      " Matching parenthesis.
set backspace=eol,start " Backspace!
set title          " Window title overwrite.
set wildignore=*.swp,*.bak,*.pyc,*.class
                   " Ignore stupid files.
set scrolloff=3    " Show three lines below the cursor.
set ttyfast
set showcmd

"" Grouped settings
" Visible whitespace characters
set list
set listchars=tab:»\ ,trail:·,extends:…,eol:¶
set showbreak=↪

" Prettier and better splits, folds.
set fillchars=vert:\│,fold:―
set splitright
set splitbelow

" Less annoyances
set visualbell
set noerrorbells

" Enable the mouse!
set mouse=a
if !has("nvim")
    if has("mouse_sgr")
        set ttymouse=sgr
    else
        set ttymouse=xterm2
    end
end

if v:version >= 703
  " Colored area after 80th character
  hi ColorColumn ctermbg=238
  let &colorcolumn=join(range(81,999),",")
endif

" Better history/undo
set history=1000
set undolevels=1000

" No mess
set nobackup
set noswapfile

" Better indentation
set expandtab
set tabstop=4
set autoindent
set copyindent
set shiftwidth=4
set smarttab
set shiftround

" Better searching
set ignorecase
set smartcase
set hlsearch
set incsearch

" Folding is cool
set foldmethod=syntax
au BufRead * normal zR

"" (Re)maps
" Who needs Ex mode?
nnoremap Q <nop>

" ; is way better than :
map ; :
noremap ;; ;

" , is a better leader than \
let mapleader=","

" Pasting? Press F2 first!
set pastetoggle=<F2>

" No arrow keys.
map <Up> <NOP>
map <Down> <NOP>
map <Left> <NOP>
map <Right> <NOP>

" Clear searches with ,/
nmap <silent> <leader>/ :nohlsearch<CR>

" ,ev and ,sv to edit and reload .vimrc
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR><leader>/

" Reselect visual block after indent/outdent.
vnoremap < <gv
vnoremap > >gv

" Space should open or create a fold
nnoremap <space> za
vnoremap <space> zf

" I want to learn to use relative line movements
set rnu
nnoremap <silent><leader>l :set rnu! rnu? <cr>

" And I'd like to have relative line numbers only on windows I'm currently in,
" but not when I'm in insert mode.
autocmd InsertEnter,FocusLost,WinLeave,CmdwinLeave * silent! :set norelativenumber
autocmd InsertLeave,FocusGained,WinEnter,CmdwinEnter * silent! :set relativenumber


"" Plugins
" Airline
set laststatus=2
let g:airline_theme="hybridline"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1

nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <leader>- <Plug>AirlineSelectPrevTab
nmap <leader>+ <Plug>AirlineSelectNextTab

" GitGutter
highlight clear SignColumn

" Deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_ignore_case = 'ignorecase'
let g:deoplete#auto_completion_start_length = 0

inoremap <expr><C-n> deoplete#mappings#manual_complete()
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

let g:deoplete#sources#jedi#show_docstring = 1

if executable("fzf")
    " FZF has sane defaults
    nnoremap <C-p> :FZF<cr>

    if executable("ag")
        let $FZF_DEFAULT_COMMAND = 'ag -l -g ""'
    endif
else
    " CtrlP
    let g:ctrlp_cmd = 'CtrlP'
    let g:ctrlp_working_path_mode = 'ra'

    " CtrlP perfomance improvements are awesome
    let g:ctrlp_match_func = {'match': 'pymatcher#PyMatch'}
    let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
    let g:ctrlp_clear_cache_on_exit = 0

    " Use ag over grep
    if executable("ag")
        set grepprg=ag\ --nogroup\ --nocolor
        let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    endif
endif

" Neomake
autocmd! BufWritePost * Neomake
let g:neomake_python_enabled_makers = ['flake8', 'pep8']

" Neoformat
nmap <leader>f :Neoformat<CR>

" vim-javascript
let g:javascript_plugin_jsdoc = 1

"" Project-specific vimrc files
set exrc
set secure
